% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PlainTextParam.R, R/MsBackendMzR.R,
%   R/MsExperiment.R, R/Spectra.R, R/XcmsExperiment.R
\name{PlainTextParam}
\alias{PlainTextParam}
\alias{saveMsObject,MsBackendMzR,PlainTextParam-method}
\alias{readMsObject,MsBackendMzR,PlainTextParam-method}
\alias{saveMsObject,MsExperiment,PlainTextParam-method}
\alias{readMsObject,MsExperiment,PlainTextParam-method}
\alias{saveMsObject,Spectra,PlainTextParam-method}
\alias{readMsObject,Spectra,PlainTextParam-method}
\alias{saveMsObject,XcmsExperiment,PlainTextParam-method}
\alias{readMsObject,XcmsExperiment,PlainTextParam-method}
\title{Store contents of MS objects as plain text files}
\usage{
PlainTextParam(path = tempdir())

\S4method{saveMsObject}{MsBackendMzR,PlainTextParam}(object, param)

\S4method{readMsObject}{MsBackendMzR,PlainTextParam}(object, param, spectraPath = character())

\S4method{saveMsObject}{MsExperiment,PlainTextParam}(object, param)

\S4method{readMsObject}{MsExperiment,PlainTextParam}(object, param, ...)

\S4method{saveMsObject}{Spectra,PlainTextParam}(object, param)

\S4method{readMsObject}{Spectra,PlainTextParam}(object, param, ...)

\S4method{saveMsObject}{XcmsExperiment,PlainTextParam}(object, param)

\S4method{readMsObject}{XcmsExperiment,PlainTextParam}(object, param, spectraPath = character())
}
\arguments{
\item{path}{For \code{PlainTextParam()}: \code{character(1)}, defining where the files
are going to be stored/ should be loaded from. The default is
\code{path = tempdir()}.}

\item{object}{for \code{saveMsObject()}: the MS data object to save, for
\code{readMsObject()}: the MS data object that should be returned}

\item{param}{an object defining and (eventually configuring) the file format
and file name or directory to/from which the data object should be
exported/imported.}

\item{spectraPath}{For \code{readMsObject()}: \code{character(1)} optionally allowing to
define the (absolute) path where the spectra files (\emph{data storage files})
can be found. This parameter is passed to the \code{loadResults()} method of
the MsBackend().}

\item{...}{Additional parameters passed down to internal functions. E.g.
parameter \code{spectraPath} if the object that is being saved contains a
\code{Spectra} object which uses a \code{MsBackendMzR} object to represent the MS
data.}
}
\value{
For \code{PlainTextParam()}: a \code{PlainTextParam} class. \code{saveMsObject()}
does not return anything but saves the object to collections of different
plain text files to a folder. The \code{readMsObject()} method returns the
restored data as an instance of the class specified with parameter \code{object}.
}
\description{
The \code{saveMsObject()} and \code{readMsObject()} methods with the \code{PlainTextParam}
option enable users to save/load different type of mass spectrometry (MS)
object as a collections of plain text files in/from a specified folder.
This folder, defined with the \code{path} parameter, will be created by the
\code{storeResults()} function. Any previous exports eventually present in that
folder will be overwritten.

The MS object currently supported for import and export with this parameter
are:
\itemize{
\item \code{MsBackendMzR} object, defined in the
(\href{https://bioconductor.org/packages/Spectra}{Spectra}) package.
\item \code{Spectra} object, defined in the
(\href{https://bioconductor.org/packages/Spectra}{Spectra}) package.
\item \code{MsExperiment} object, defined in the
(\href{https://bioconductor.org/packages/MsExperiment}{MsExperiment}) package.
\item \code{XcmsExperiment} object, defined in the
(\href{https://bioconductor.org/packages/xcms}{xcms}) package.
}

See their respective section below for details and formats of the
exported files.
}
\section{On-disk storage for \code{MsBackendMzR} objects}{


For \code{MsBackendMzR} objects, defined in the \code{Spectra} package, the following
file is stored:
\itemize{
\item The backend's \code{spectraData()} is stored in a tabular format in a text file
named \emph{ms_backend_data.txt}. Each row of this tab-delimited text file
corresponds to a spectrum with its respective metadata in the columns.
}
}

\section{On-disk storage for \code{Spectra} objects}{


For \code{Spectra} objects, defined in the \code{Spectra} package, the files listed
below are stored. Any parameter passed to the \code{saveMsObject()} method using
its \code{...} parameter are passed to the \code{saveMsObject()} call of the
\code{Spectra}'s backend.
\itemize{
\item The \code{processingQueueVariables}, \code{processing}, \code{processingChunkSize()}, and
\code{backend} class information of the object are stored in a text file named
\emph{spectra_slots.txt}. Each of these slots is stored such that the name of
the slot is written, followed by "=" and the content of the slot.
\item The processing queue of the \code{Spectra} object, ensuring that any spectra
data modifications are retained, is stored in a \code{json} file named
\emph{spectra_processing_queue.json}. The file is written such that each
processing step is separated by a line and includes all information about
the parameters and functions used for the step.
\item The \code{Spectra}'s MS data (i.e. it's backend) is stored/exported using
the \code{saveMsObject()} method of the respective backend type. Currently
only backends for which the \code{saveMsObject()} method is implemented (see
above) are supported.
}
}

\section{On-disk storage for \code{MsExperiment} objects}{


For \code{MsExperiment} objects, defined in the \code{MsExperiment} package, the
exported data and related text files are listed below. Any parameter passed
to the \code{saveMsObject()} through \code{...} are passed to the \code{saveMsObject()}
calls of the individual MS data object(s) within the \code{MsExperiment}.

Note that at present \code{saveMsObject()} with \code{PlainTextParam} does \strong{not}
export the full content of the \code{MsExperiment}, i.e. slots \verb{@experimentFiles},
\verb{@qdata}, \verb{@otherData} and \verb{@metadata} are currently not saved.
\itemize{
\item The \code{sampleData()} is stored as a text file named
\emph{ms_experiment_sample_data.txt}. Each row of this file corresponds to a
sample with its respective metadata in the columns.
\item The links between the sample data and any other data within the
\code{MsExperiment} are stored in text files named
\emph{ms_experiment_sample_data_links_....txt},
with "..." referring to the data slot to which samples are linked.
Each file contains the mapping between the sample data and the elements in
a specific data slot (e.g., \code{Spectra}). The files are tabulator delimited
text files with two columns of integer values, the first representing the
index of a sample in the objects \code{sampleData()}, the second the index of
the assigned element in the respective object slot.
The table "ms_experiment_element_metadata.txt" contains the metadata of
each of the available mappings.
\item If the \code{MsExperiment} contains a \code{Spectra} object with MS data, it's
content is exported to the same folder using a \code{saveMsObject()} call on
it (see above for details of exporting \code{Spectra} objects to text files).
}
}

\section{On-disk storage for \code{XcmsExperiment} objects}{


For \code{XcmsExperiment} objects, defined in the \code{xcms} package, the exported
data and related text files are:
\itemize{
\item The previously defined \code{MsExperiment} object-related files. See the
respective section for more information.
\item The \code{processHistory()} information of the object is stored in a \code{json}
file named \emph{process_history.json}. The file is written such that each
processing step is separated by a line and includes all information about
the parameters and functions used for that step.
\item The chromatographic peak information obtained with \code{chromPeaks()} and
\code{chromPeaksData()} is stored in tabular format in the text files
\emph{chrom_peaks.txt} and \emph{chrom_peak_data.txt}, respectively. The first file's
rows represent single peaks with their respective metadata in the columns.
The second file contains the same peaks by rows but with processing
information such as whether they are filled or merged in the columns.
\item The \code{featureDefinitions()} are stored in a text file named
\emph{feature_definitions.txt}. Additionally, a second file named
\emph{feature_peak_index.txt} is generated to connect the features' definitions
with their names. Each row of the first file corresponds to a feature with
its respective metadata in the columns. The second file contains the
mapping of each chromatographic peak (e.g., one peak ID per row) to its
respective feature ID.
}
}

\author{
Philippine Louail
}
\concept{MS object export and import formats.}
